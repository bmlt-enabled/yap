"use strict";(self.webpackChunkyapdocs=self.webpackChunkyapdocs||[]).push([[9722],{9505:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var o=n(5893),r=n(1151);const i={},s="Venue Options",a={id:"meeting-search/venue-options",title:"Venue Options",description:"Temporary Closures",source:"@site/docs/meeting-search/venue-options.md",sourceDirName:"meeting-search",slug:"/meeting-search/venue-options",permalink:"/meeting-search/venue-options",draft:!1,unlisted:!1,editUrl:"https://github.com/bmlt-enabled/yap/edit/main/docs/docs/meeting-search/venue-options.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Aggregator Meeting Search",permalink:"/meeting-search/tomato-meeting-search"},next:{title:"Announce Service Body",permalink:"/helpline/announce_servicebody_volunteer_routing"}},c={},l=[{value:"Temporary Closures",id:"temporary-closures",level:2},{value:"Virtual Meetings",id:"virtual-meetings",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"venue-options",children:"Venue Options"}),"\n",(0,o.jsx)(t.h2,{id:"temporary-closures",children:"Temporary Closures"}),"\n",(0,o.jsx)(t.p,{children:"If a meeting is marked with the TC format then it will be excluded from results. If it marked as a Virtual Meetings as well then it will be returned by with no physical address details."}),"\n",(0,o.jsxs)(t.p,{children:["If you want the text from the format description to be returned add TC to ",(0,o.jsx)(t.code,{children:"include_format_details"}),". Example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-php",children:"static $include_format_details = ['TC', 'VM', 'HY'];\n"})}),"\n",(0,o.jsx)(t.p,{children:"You can include any format here.  For example if you wanted to show whether a meeting is Open or Closed you could do that by including the format code in this setting."}),"\n",(0,o.jsx)(t.p,{children:"If you want to change the description of some of the specific formats you can change the format description for that specific language in your root server."}),"\n",(0,o.jsx)(t.h2,{id:"virtual-meetings",children:"Virtual Meetings"}),"\n",(0,o.jsx)(t.p,{children:"If a meeting is marked as VM or HY with a format then you should be able to automatically have the virtual_meeting_link and phone_meeting_number returned in the SMS. If you want the links (for some reason), to be said in voice responses, you can enable this with say_links set to true. If you want the text from the format description to be returned add VM or HY to include_format_details. Example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-php",children:"static $include_format_details = ['TC', 'VM', 'HY'];\n"})}),"\n",(0,o.jsx)(t.p,{children:"If you want to change the description of some of the specific formats you can change the format description for that specific language in your root server."})]})}function u(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>s});var o=n(7294);const r={},i=o.createContext(r);function s(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);