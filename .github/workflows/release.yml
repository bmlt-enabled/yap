name: 'release'

on:
  push:
    tags: [ '*' ]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php:
          - "8.1"

    steps:
      - uses: actions/checkout@v4
        id: code-checkout

      - name: Install Dependencies
        uses: ./.github/actions/install-deps

      - name: Lint
        uses: ./.github/actions/lint

  create_release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php:
          - "8.1"
    needs: [ lint ]
    name: Create release
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
        id: code-checkout

      - name: Setup PHP
        uses: ./.github/actions/setup-php

      - name: Generate release notes
        id: generate_release_notes
        run: |
          cd src
          curl -LO https://raw.githubusercontent.com/bmlt-enabled/release-notes-tool/master/gh-release-notes.sh
          chmod +x gh-release-notes.sh
          ./gh-release-notes.sh RELEASENOTES.md "###"
          RELEASE_TYPE=$(if [[ "$GITHUB_REF_NAME" =~ "beta" ]]; then echo "true"; else echo "false"; fi)
          echo "RELEASE_TYPE=${RELEASE_TYPE}" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: "src/changelog.txt"
          prerelease: ${{ env.RELEASE_TYPE }}

  package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php:
          - "8.1"
    needs: [ lint, create_release ]
    steps:
      - uses: actions/checkout@v4
        id: code-checkout

      - name: Setup PHP
        uses: ./.github/actions/setup-php

      - name: Install Dependencies
        uses: ./.github/actions/install-deps

      - name: Build package
        id: build-package
        run: |
          cd src
          export ARTIFACT_FILE=yap-${GITHUB_REF##*/}
          export ARTIFACT_FILENAME=${ARTIFACT_FILE}.zip
          git archive --format=zip --output=${ARTIFACT_FILENAME} --prefix=${ARTIFACT_FILE}/ HEAD
          DISABLE_NOTIFIER=true make deploy
          unzip ${ARTIFACT_FILENAME}
          rm ${ARTIFACT_FILENAME}
          echo ${GITHUB_SHA} > ${ARTIFACT_FILE}/storage/app/build.txt
          cp -R vendor ${ARTIFACT_FILE}/
          cp .env.production ${ARTIFACT_FILE}/.env
          mkdir -p ${ARTIFACT_FILE}/public/dist && cp -R public/dist/. ${ARTIFACT_FILE}/public/dist
          find ./${ARTIFACT_FILE} -type d | xargs chmod 755
          find ./${ARTIFACT_FILE} -name '*.php' | xargs chmod 644
          zip -r -9 ${ARTIFACT_FILENAME} ${ARTIFACT_FILE}
          curl -LO https://raw.githubusercontent.com/bmlt-enabled/release-notes-tool/master/gh-release-notes.sh
          chmod +x gh-release-notes.sh
          ./gh-release-notes.sh RELEASENOTES.md "###"

      - name: Prepare artifact metadata
        id: prepare_artifact_metadata
        run: |
          echo ::set-output name=ARTIFACT_PATH::src/yap-${GITHUB_REF##*/}.zip
          echo ::set-output name=ARTIFACT_NAME::yap-${GITHUB_REF##*/}.zip

      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prepare_artifact_metadata.outputs.ARTIFACT_PATH }}
          asset_name: ${{ steps.prepare_artifact_metadata.outputs.ARTIFACT_NAME }}
          asset_content_type: application/zip
