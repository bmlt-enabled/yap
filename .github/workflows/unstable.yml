name: 'unstable'

on:
  push:
    branches: [ 'main' ]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php:
          - "7.4"
          - "8.0"
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - uses: actions/checkout@v2
        id: code-checkout

      - name: Validate composer.json
        id: composer-validate
        run: composer validate

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-lint-php-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-lint-php-${{ matrix.php }}-

      - name: Install dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        id: install-dependencies
        uses: php-actions/composer@v5
        with:
          php_version: ${{ matrix.php }}
          args: --prefer-dist --no-progress --no-suggest

      - name: PHPCS checker
        id: php-codesniffer
        run: vendor/squizlabs/php_codesniffer/bin/phpcs

      - name: Test
        if: matrix.php == '8.0'
        run: make test

      - name: Send coverage data to codecov.io
        if: matrix.php == '8.0'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml

      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#yap'
        if: failure()

  package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php:
          - "7.4"
          - "8.0"
    permissions:
      id-token: write
      contents: write
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    needs: [ lint ]
    steps:
      - uses: actions/checkout@v2
        id: code-checkout

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php }}-

      - name: Install dependencies
        if: steps.composer-cache.outputs.cache-hit != 'true'
        id: install-dependencies
        uses: php-actions/composer@v5
        with:
          php_version: ${{ matrix.php }}
          args: --prefer-dist --no-dev --no-progress --no-suggest

      - name: Build package
        id: build-package
        run: |
          export ARTIFACT_FILE=yap-php-${{ matrix.php }}-${GITHUB_RUN_NUMBER}-${GITHUB_SHA}
          export ARTIFACT_FILENAME=${ARTIFACT_FILE}.zip
          echo "ARTIFACT_FILENAME=${ARTIFACT_FILENAME}" >> $GITHUB_ENV
          git archive --format=zip --output=${ARTIFACT_FILENAME} --prefix=${ARTIFACT_FILE}/ HEAD
          DISABLE_NOTIFIER=true make deploy
          unzip ${ARTIFACT_FILENAME}
          rm ${ARTIFACT_FILENAME}
          echo ${GITHUB_SHA} > ${ARTIFACT_FILE}/build.txt
          cp -R vendor ${ARTIFACT_FILE}/
          mkdir -p ${ARTIFACT_FILE}/public/dist && cp -R public/dist/. ${ARTIFACT_FILE}/public/dist
          find ./${ARTIFACT_FILE} -type d | xargs chmod 755
          find ./${ARTIFACT_FILE} -name '*.php' | xargs chmod 644
          zip -r -9 ${ARTIFACT_FILENAME} ${ARTIFACT_FILE}
          mkdir artifacts/
          mv ${ARTIFACT_FILENAME} artifacts/

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions/gh-ci-s3-artifact
          role-session-name: gh-actions-jft
          aws-region: us-east-1

      - name: copy artifact to s3
        run: |
          aws s3 cp artifacts/${ARTIFACT_FILENAME} s3://${{ secrets.S3_BUCKET }}/yap/${ARTIFACT_FILENAME}

      - uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#yap'
        if: failure()

